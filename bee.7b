# a build script for the project RustBee using itself
# if you are on Windows and have an error like : error: linking with link.exe failed: exit code: 1 , then do
# rustup toolchain install stable-x86_64-pc-windows-gnu
# rustup default stable-x86_64-pc-windows-gnu

project  =rb
main=src${~/~}main
common =..${~/~}simscript${~/~}comm-build.7b:file
crate_dir=..${~/~}crates
comp opts=[--extern,simzip]
version=1.15.04

mode=mode:prop
if {
	eq(mode,release) then {
		array(comp opts, -C,opt-level=3,--cfg, feature="release")
		assign(comp opts, ~~)
	}
}

target clean_extra {
    dependency {true}
    rm  (
        ${~cwd~}${~/~}src${~/~}ver.rs
    )
}

target crate {
	dependency{target(version update)}
}

target install::Install RustBee everyone's use  {
    dependency {true}
    ask(Are you going to install the ${project}? [N/y/l],n)
    if {
       or{
         eq(${~~},y)
         eq(${~~},Y)
       }
       then {
	    if {
	      eq(windows,~os~)
	      then {    
	           display(Windows install)
	           env(HOMEPATH)
	           assign(rustbee,${~~}${~/~}.rustbee${~/~}bin)
		       mkd(rustbee)
	           cp(rb.exe,rustbee)
	           display(Installed ${~~} in ${rustbee})
	           # add to PATH if needed
	           env(PATH)
	           assign(path,~~) 
	           if {
	               contains (path, .rustbee${~/~}bin)
	               else {
	                  display(Set env PATH)
	                  #exec setx (PATH, %path%;${rustbee} )
	               }
	           }
	      }
	      else {
	        if {
	            neq(${User}, root)
	            then {
	                display(Please run the script as an administrator)
	            }
	            else {
                   exec cp(${~cwd~}/${project},/usr/local/bin)
                   display(Installed.)
	            }
	        }
	      }
	    }
      }
    }
    if {
       or{
         eq(${~~},l)
         eq(${~~},L)
       }
       then {
       }
    }
}

target package {
	dependency {
        target(build)
    }
    dependency {
    	anynewer(bee.7b,.${~/~}rustbee-${version}.zip)
    }
    zip(.${~/~}rustbee-${version}.zip,
	-B ${project},
	.${~/~}bee.7b,
	-B ${project},
	.${~/~}env.7b,
	-B ${project},
	.${~/~}doc${~/~}RUSTBEE.md,
	-B ${project},
	.${~/~}README.md,
	-B ${project},
	.${~/~}rb${ext},
	-B ${project},
	.${~/~}addpath.sh)
	display(done ${~~})
}

target version update : . {
    dependency {
         anynewer(${~cwd~}${~/~}*.rs,${~cwd~}${~/~}${project}${ext})
    }
    dependency {
      eq {
        timestamp(${~cwd~}${~/~}src${~/~}ver.rs)
        # none
      }
    }

    dependency {
         anynewer(${~cwd~}${~/~}bee.7b,${~cwd~}${~/~}${project}${ext})
    }

    display(Generating ver.rs)
    now()
       
    write(${~cwd~}${~/~}src${~/~}ver.rs,"// auto generated
pub fn version() -> (&'static str, u32, &'static str) {
      (&\"${version}\", 152, & \"",${~~},"\")
}")  # 
}

include(env.7b);
include(common);
